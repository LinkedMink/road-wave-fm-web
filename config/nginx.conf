error_log stderr info;
access_log /dev/stdout combined;

map $remote_addr $proxy_forwarded_elem {
    # IPv4 addresses can be sent as-is
    ~^[0-9.]+$          "for=$remote_addr";

    # IPv6 addresses need to be bracketed and quoted
    ~^[0-9A-Fa-f:.]+$   "for=\"[$remote_addr]\"";

    # Unix domain socket names cannot be represented in RFC 7239 syntax
    default             "for=unknown";
}

map $http_forwarded $proxy_add_forwarded {
    # If the incoming Forwarded header is syntactically valid, append to it
    "~^(,[ \\t]*)*([!#$%&'*+.^_`|~0-9A-Za-z-]+=([!#$%&'*+.^_`|~0-9A-Za-z-]+|\"([\\t \\x21\\x23-\\x5B\\x5D-\\x7E\\x80-\\xFF]|\\\\[\\t \\x21-\\x7E\\x80-\\xFF])*\"))?(;([!#$%&'*+.^_`|~0-9A-Za-z-]+=([!#$%&'*+.^_`|~0-9A-Za-z-]+|\"([\\t \\x21\\x23-\\x5B\\x5D-\\x7E\\x80-\\xFF]|\\\\[\\t \\x21-\\x7E\\x80-\\xFF])*\"))?)*([ \\t]*,([ \\t]*([!#$%&'*+.^_`|~0-9A-Za-z-]+=([!#$%&'*+.^_`|~0-9A-Za-z-]+|\"([\\t \\x21\\x23-\\x5B\\x5D-\\x7E\\x80-\\xFF]|\\\\[\\t \\x21-\\x7E\\x80-\\xFF])*\"))?(;([!#$%&'*+.^_`|~0-9A-Za-z-]+=([!#$%&'*+.^_`|~0-9A-Za-z-]+|\"([\\t \\x21\\x23-\\x5B\\x5D-\\x7E\\x80-\\xFF]|\\\\[\\t \\x21-\\x7E\\x80-\\xFF])*\"))?)*)?)*$" "$http_forwarded, $proxy_forwarded_elem";

    # Otherwise, replace it
    default "$proxy_forwarded_elem";
}

limit_req_zone $binary_remote_addr zone=static:8m rate=14r/s;
limit_req_zone $binary_remote_addr zone=api:8m rate=2r/s;

server {
	listen 80 default_server;
	listen [::]:80 default_server;
	server_name _;
	return 301 https://$host$request_uri;
}

server { 
  listen 443 ssl;
  listen [::]:443 ssl;
  server_name localhost;

  ssl_certificate /etc/ssl/certs/localhost.crt;
  ssl_certificate_key /etc/ssl/certs/localhost.key;

  http2              on;
  sendfile           on;
  sendfile_max_chunk 1m;
  tcp_nopush         on;

  gzip_static on;
  brotli_static on;

  root /usr/share/nginx/html;

  location / {
    limit_req zone=static burst=24 delay=18;

    try_files $uri $uri/ /index.html;

    location ~* \.(ico|svg|png|json|txt)$ {
      expires 30d;
      add_header Cache-Control "public";
      access_log off;
    }
  }

  location /static/ {
    limit_req zone=static burst=24 delay=18;

    expires 1y;
    add_header Cache-Control "public";
    access_log off;
  }

  location /api/ {
    gzip on;
    gzip_min_length 1024;
    gzip_types text/plain application/json;
    gzip_comp_level 5;
    
    brotli on;
    brotli_min_length 1024;
    brotli_types text/plain application/json;

    limit_req zone=api burst=6 delay=2;

    proxy_set_header Forwarded $proxy_add_forwarded;

    location /api/data {
      return 302 /api/data/;
    }

    location /api/data/ {
      proxy_pass http://rwf-api:58081/;
    }

    location /api/user {
      return 302 /api/user/;
    }

    location /api/user/ {
      proxy_pass http://eiu-api:58080/;
    }
  }
}
